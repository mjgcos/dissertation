install.packages("AER")
library("AER", lib.loc="C:/Users/Matt/Documents/R/win-library/3.0")
5 + 2
?cos()
?log
log2(8)
log(8,2)
test1.c(2, 5, 9, 10)
test1.v = c(2, 5, 9, 10)
c
test1.v
test1.v[3]
position(1:20)
position = c(1:20)
pos = seq(1:20)
break = seq(1, 50, 10)
b = seq(1, 50, 10)
years = seq(2005, 2010)
?sd()
sd(pos)
sd(test1.v)
var(pos)
NO = 1000
M = 0.2
num.at.age = NO * exp(-M * ages)
num.at.age(ages) = NO * exp(-M * ages)
num.at.age = NO * exp(-M * a)
num.at.age(a) = NO * exp(-M * a)
a = seq(0, 25)
num.at.age = NO * exp(-M * a)
plot(num.at.age)
rnorm(1, 0, 1)
rnorm(1, 0, 1)
rnorm(1, 0, 1)
rnorm(15, 0, 1)
runif
runif(1000)
mean(runif(1000))
mean(runif(1000000))
lat = runif(1000, 40.4, 41.2)
temp = rnorm(1000, 65, 8)
plot(temp)
hist(temp)
rbind(test1.v, b)
test2.v = c(test1.v, 17)
cbind(test2.v, b)
test1.m = rbind(test2.v, b)
test1.m
dim(test1.m)
test.m = matrix(seq(1:6), 2, 3)
test.m
demo()
library("AER", lib.loc="C:/Users/Matt/Documents/R/win-library/3.0")
data("BankWages")
xtabs
## exploratory analysis of job ~ education
## (tables and spine plots, some education levels merged)
xtabs(~ education + job, data = BankWages)
edcat <- factor(BankWages$education)
levels(edcat)[3:10] <- rep(c("14-15", "16-18", "19-21"), c(2, 3, 3))
tab <- xtabs(~ edcat + job, data = BankWages)
prop.table(tab, 1)
spineplot(tab, off = 0)
plot(job ~ edcat, data = BankWages, off = 0)
> library(plyr)
> library(reshape)
> df <- read.csv("PL 12-13.csv")
> df <- df[, c(2, 3, 4, 7)]
> df <- rename(df, c(Date = "date", HomeTeam = "H", AwayTeam = "A"))
> df$date <- as.Date(df$date, format = "%d/%m/%y")
> dfm <- melt(df, measure.vars = c("H", "A"), variable_name = "loc")
> dfm <- rename(dfm, c(value = "team"))
> dfm <- dfm[order(dfm$date, dfm$team), c("date", "team", "loc", "FTR")]
> dfm$pts <- as.integer(with(dfm, ifelse((loc == "H" & FTR == "H"), 3, ifelse((loc == "A" & FTR == "A"), 3, ifelse(FTR == "D", 1, 0)))))
> dfm1 <- ddply(dfm, .(team), transform, cumpts = cumsum(pts))
library(plyr)
library(reshape)
df <- read.csv("PL 12-13.csv")
df <- df[, c(2, 3, 4, 7)]
df <- rename(df, c(Date = "date", HomeTeam = "H", AwayTeam = "A"))
df$date <- as.Date(df$date, format = "%d/%m/%y")
dfm <- melt(df, measure.vars = c("H", "A"), variable_name = "loc")
dfm <- rename(dfm, c(value = "team"))
dfm <- dfm[order(dfm$date, dfm$team), c("date", "team", "loc", "FTR")]
dfm$pts <- as.integer(with(dfm, ifelse((loc == "H" & FTR == "H"), 3, ifelse((loc == "A" & FTR == "A"), 3, ifelse(FTR == "D", 1, 0)))))
dfm1 <- ddply(dfm, .(team), transform, cumpts = cumsum(pts))
library(plyr)
library(reshape)
df <- read.csv("PL 12-13.csv")
PL.12.13 <- read.csv("~/Academic/Semester 2/Project/Football Betting/PL 12-13.csv")
View(PL.12.13)
library(plyr)
library(reshape)
df <- read.csv("PL 12-13.csv")
View(PL.12.13)
df <- PL.12.13[, c(2, 3, 4, 7)]
df <- rename(df, c(Date = "date", HomeTeam = "H", AwayTeam = "A"))
df$date <- as.Date(df$date, format = "%d/%m/%y")
dfm <- melt(df, measure.vars = c("H", "A"), variable_name = "loc")
dfm <- rename(dfm, c(value = "team"))
dfm <- dfm[order(dfm$date, dfm$team), c("date", "team", "loc", "FTR")]
dfm$pts <- as.integer(with(dfm, ifelse((loc == "H" & FTR == "H"), 3, ifelse((loc == "A" & FTR == "A"), 3, ifelse(FTR == "D", 1, 0)))))
dfm1 <- ddply(dfm, .(team), transform, cumpts = cumsum(pts))
head dfm1
head(dfm1)
cdate <- unique(dfm1$date)
cteam <- unique(dfm1$team)
combs <- merge(cdate, cteam, all = TRUE)
combs <- rename(combs, c(x = "date", y = "team"))
dfm2 <- merge(combs, dfm1, by = c("date", "team"), all.x = TRUE)
dfm2 <- dfm2[order(dfm2$team, dfm2$date), ]
require(zoo)
dfm3 <- ddply(dfm2, .(team), transform, cumpts1 = na.locf(cumpts, na.rm = FALSE))
dfm3 <- ddply(dfm3, .(date), transform, position = rank(-cumpts1, ties.method = "min"))
leaguetable <- function(df, fdate) {
dfm4a <- cast(dfm3, team ~ ., c(sum, length),
subset = (!is.na(FTR) & date <= fdate),
value = "pts")
dfm4a <- rename(dfm4a, c(sum = "P", length = "G"))
dfm4b <- cast(dfm3, team ~ pts, length,
subset = (!is.na(FTR) & date <= fdate),
value = "position")
dfm4b <- rename(dfm4b, c(`0` = "L", `1` = "D",
`3` = "W"))
dfm4b <- dfm4b[, c(1, 4, 3, 2)]
dfm4 <- merge(dfm4a, dfm4b)
dfm4$rank <- rank(-dfm4$P, ties.method = "min")
dfm4[order(dfm4$rank), c(7, 1:6)]
}
leaguetable
leaguetable1 <- function(df, fdate) {
dfm4a <- cast(dfm3, team ~ ., c(sum, length), subset = (!is.na(FTR) & date <= fdate), value = "pts")
dfm4a <- rename(dfm4a, c(sum = "P", length = "G"))
dfm4b <- cast(dfm3, team ~ pts, length, subset = (!is.na(FTR) & date <= fdate), value = "position")
dfm4b <- rename(dfm4b, c(`0` = "L", `1` = "D", `3` = "W"))
dfm4b <- dfm4b[, c(1, 4, 3, 2)]
dfm4 <- merge(dfm4a, dfm4b)
dfm4$rank <- rank(-dfm4$P, ties.method = "min")
dfm4[order(dfm4$rank), c(7, 1:6)]
}
recoded <- read.csv("~/Academic/Semester 1/Analysis/Doing Business Indicators data assignment/recoded.csv")
View(recoded)
500^0.5
1/(500^0.5)
1.96 + 1/(500^0.5)
1.96*(1/(500^0.5))
install.packages("KernSmooth")
help(KernSmooth)
library(KernSmooth)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
clear
242096.1/9594314.9
242096.1/9424872.9
873 + 1959 + 2294 + 665 + 1051
#library(xlsx)
library(dplyr)
library(tidyr)
library(rugarch)
####### WARNING: Running code in entirety includes two very inefficient for loops
####### at the end. Advise not running - they loop over 46000 observations.
setwd("~/Academic/SGPE/Dissertation/Data/csv")
#setwd("~/dissertation/Data/csv/")
dat <- read.csv("datastream_combined.csv", colClasses = "character")
#basic manipulation
for(i in 2:65){
dat[,i] <- as.numeric(dat[,i])
}
dat[,1] <- as.Date(dat[,1], format = "%d/%m/%Y")
dat <- subset(dat, dat$date > as.Date("2007-01-01"))
#Generate bond spreads to DE
dat$bsp_at <- dat[,5] - dat[,2]
dat$bsp_be <- dat[,6] - dat[,2]
dat$bsp_es <- dat[,15] - dat[,2]
dat$bsp_fn <- dat[,11] - dat[,2]
dat$bsp_fr <- dat[,3] - dat[,2]
dat$bsp_gr <- dat[,7] - dat[,2]
dat$bsp_ie <- dat[,8] - dat[,2]
dat$bsp_it <- dat[,4] - dat[,2]
dat$bsp_lt <- dat[,12] - dat[,2]
dat$bsp_ma <- dat[,13] - dat[,2]
dat$bsp_nl <- dat[,9] - dat[,2]
dat$bsp_pt <- dat[,10] - dat[,2]
dat$bsp_sk <- dat[,14] - dat[,2]
#Global Indicators
dat$vix_all <- dat[,16]
dat$vstoxx_all <- dat[,17]
dat$euribor_all <- dat[,18]
#Stock price indices
dat$stocks_at <- dat[,27]
dat$stocks_de <- dat[,20]
dat$stocks_es <- dat[,26]
dat$stocks_fr <- dat[,21]
dat$stocks_gr <- dat[,25]
dat$stocks_ie <- dat[,19]
dat$stocks_it <- dat[,24]
dat$stocks_nl <- dat[,22]
dat$stocks_pt <- dat[,23]
#CDS
dat$cds_at <- dat[,43]
dat$cds_be <- dat[,44]
dat$cds_cy <- dat[,46]
dat$cds_de <- dat[,39]
dat$cds_es <- dat[,40]
dat$cds_fr <- dat[,45]
dat$cds_gr <- dat[,42]
dat$cds_ie <- dat[,41]
dat$cds_it <- dat[,38]
dat$cds_nl <- dat[,47]
#non-EZ
dat$cds_dk <- dat[,62]
dat$cds_ic <- dat[,64] #iceland
dat$cds_sv <- dat[,59] #sweden
dat$cds_uk <- dat[,60]
dat$cds_us <- dat[,61]
df <- cbind(dat[,1], dat[,66:105])
names(df)[1] <- "date"
#write.csv(df,"cleaned_datastram.csv", row.names = FALSE)
#######################
#######Tidying#########
#######################
#cols: date, country, variable, value.
#using dplyr and tidyr notation, condense variables into entries by date (NB, NAs removed)
#%>% is dplyr pipe function
tidier <- df %>% gather(key, value, -date)
#Split key column into country and variable:
tidy <- tidier %>% separate(key, into = c("variable", "country"), sep = "\\_")
#list variables and countries as factor rather than character vector
tidy$variable <- as.factor(tidy$variable)
tidy$country <- as.factor(tidy$country)
#reorder rows by country then date
tidy <- tidy %>% arrange(date, country)
clean <- tidy %>% spread(variable, value)
clean <- clean %>% arrange(country, date)
######################
##Dummy Variables#####
######################
#Date schedule A
greek_1 <- seq(as.Date("2009-10-20"), as.Date("2012-03-09"), by="days")
greek_2 <- seq(as.Date("2015-01-25"), as.Date("2015-07-02"), by="days")
greek <- c(greek_1, greek_2)
ireland <- seq(as.Date("2010-10-18"), as.Date("2011-03-09"), by="days")
portugal <- seq(as.Date("2011-03-23"), as.Date("2011-06-05"), by="days")
spain <- seq(as.Date("2012-05-25"), as.Date("2012-06-09"), by="days")
clean <- mutate(clean, greece_a = ifelse(country == "gr" & date %in% greek, 1, 0))
clean <- mutate(clean, ireland_a = ifelse(country == "ie" & date %in% ireland, 1, 0))
clean <- mutate(clean, portugal_a = ifelse(country == "pt" & date %in% portugal, 1, 0))
clean <- mutate(clean, spain_a = ifelse(country == "es" & date %in% spain, 1, 0))
clean <- mutate(clean, crisis_a = ifelse(greece_a + ireland_a + portugal_a +spain_a == 0, 0, 1))
#Date Schedule B
#set strength of tollerance
include = c("es", "fr", "gr", "ie", "it","pt", "nl", "all")
clean <- filter(clean, country %in% include )
str(clean)
ind <- clean[, 1:4]
ind <- filter(ind, country != "all")
ind2 <- filter(clean[,1:3], country == "all")
fname <- paste("../../Document/out/adf_test", ".txt", sep = "")
times <- subset(clean, country == cy)
times <- subset(clean, date < as.Date("2012-01-01"))
ur.df(times$bsp)
library(rugarch)
times <- subset(clean, country == "it")
ur.df(times$bsp)
#library(xlsx)
library(dplyr)
library(tidyr)
library(rugarch)
ur.df(times$bsp)
?ur.df
library(urca)
ur.df(times$bsp)
save <- ind
include = c("es", "fr", "gr", "ie", "it","pt", "nl", "all")
save <- subset(save, date < as.Date("2012-02-01"))
summary(save$date)
fname <- paste("../../Document/out/adf_test_metiu", ".txt", sep = "")
for(a in 1:8){
cy <- include[a]
times <- subset(save, country == cy)
adf <- ur.df(times$bsp)
result <- paste(country, "before", adf, sep=" ")
cat(result, file= fname, sep="\n", append=TRUE)
}
str(save)
save <- subset(save, date < as.Date("2012-02-01"))
fname <- paste("../../Document/out/adf_test_metiu", ".txt", sep = "")
for(a in 1:8){
cy <- include[a]
times <- subset(save, country == cy)
adf <- ur.df(times$bsp)
result <- paste(country, "before", adf, sep=" ")
cat(result, file= fname, sep="\n", append=TRUE)
}
save <- subset(save, date < as.Date("2012-02-01"))
fname <- paste("../../Document/out/adf_test_metiu", ".txt", sep = "")
for(a in 1:8){
cy <- include[a]
times <- subset(save, country == cy)
adf <- ur.df(times$bsp)
result <- paste(cy, "(Metiu, no diff)", adf, sep=" ")
cat(result, file= fname, sep="\n", append=TRUE)
}
?ur.df
for(a in 1:8){
cy <- include[a]
times <- subset(save, country == cy)
adf <- ur.df(times$bsp)
result <- paste(cy, "(Metiu, no diff)", adf, sep=" ")
cat(result, file= fname, sep="\n", append=TRUE)
}
times <- subset(save, country == "es")
ur.df(times$bsp)
times <- subset(save, country == "fr")
ur.df(times$bsp)
times <- subset(save, country == "gr")
ur.df(times$bsp)
times <- subset(save, country == "ie")
ur.df(times$bsp)
